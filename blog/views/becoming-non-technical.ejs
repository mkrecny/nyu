<div style="width:550px;font-size:20px;" class="stack-el">

<p>
  <span style="font-size:22px;color:#353535"><b>Becoming Non-technical</b></span><br>
  <hr>
</p>

<p>I wasn’t one of those kids - like many of you - who started programming at eight years old. Instead, gaming consumed me at that age. Commander Keen, Diablo and Quake held me in thrall. </p>
<p>My first impulse to start programming was the impulse to make my own games. It came at around age twelve. I never got very far with it. In fact, I never got beyond a few bewildering tutorials on the Python REPL. I couldn’t see a path from those cryptic runes in my terminal, to the rich and fantastic worlds I explored in games.</p>
<p>My next collision with programming was in college. I was a freshman at Duke University in 2006 as Facebook began to explode. The impulse to program visited me again. This time it was a mercantile ambition; “if I learn to make apps like Facebook, I&#39;ll be rich!” And so in my freshman year I began to teach myself development in earnest.</p>
<p>Soon after, a few unexpected ideas began to bubble up from the murky soup of my beer-pong-addled psyche.</p>
<p>First, I came to believe that building things with code was something I could happily spend big chunks of my life doing. Maybe, I thought, I was taking the first toddling steps towards that most unattainable of things; a Passion.</p>
<p>Second, I realized that I found programming <em>itself</em> interesting. Not just as a thing to do, but as a thing to study. I ended up doing a thesis about cellular automata at the end of my degree.</p>
<p>And third, I realized I could start making money <em>right now</em>, by being a freelance programmer. My first paid programming gig was building a Blackboard clone for the University of Conneticut as a Facebook app. &#39;Huskybook&#39; didn&#39;t get much traction, I&#39;m sad to say.</p>
<p>Straight out of college, I started working at a gaming company. Finally, I thought, I’m making games. Despite having a lot of fun, I <a href="http://edu.mkrecny.com/thoughts/how-i-fired-myself">managed to end that episode in disaster</a>.</p>
<p>Over the next six years worked at various startups and even started two companies myself. I honed my craft and found that it was indeed a passion. I was never <em>very</em> good. I was never a so-called 10x programmer.</p>
<p>And then, there was a minor apocalypse in my life, and I left the US, my home of almost 10 years. I moved to London, my birthplace, and drifted aimlessly for nearly six months. This post is the first one I&#39;ve written since that moment, well over a year ago.</p>
<p>As the search for paid work finally and joltingly, commenced, I realized that I wasn’t looking for technical roles anymore. Why? I wasn’t sure. I just felt like I couldn’t go back to spending day after day writing code.</p>
<p>A friend from my old, now oddly distant, life in New York reached out to me. He convinced me to apply for a job at Palantir in London. He assumed that I&#39;d apply for an engineering role. But to his (and my) surprise, I went for a non-technical role as a strategist. Later I would justify this decision as a desire to round out my skillset.</p>
<p>I got the job, and traded in my IDE for a never-empty inbox. I learned to Power Point and to Word. I overcame my fear of presenting to groups people. I developed the skill of translating technical concepts into simple, clear language, that everyone can understand.</p>
<p>In general, I became a better communicator. My ability to empathize with others increased, and I realized how incredibly low-EQ I had been before. I became more effective in my social life overall, most rewardingly in the world of dating.</p>
<p>Shockingly, I started to find engineers occasionally frustrating. Why couldn&#39;t they see that this just had to get done? Never mind technical debt .. we can adress that later. Why can&#39;t he see the bigger picture? All this minutiae is exhausting and distracting! Does every single thing <em>really</em> need test coverage?</p>
<p>And my own technical abilities began to atrophy. I opened up a terminal one day to help shuffle some files between AWS boxes. I guiltily found myself having to google some basic unix commands. In tandem, I found myself less quantitatively nimble than I had been in the past. Had I ever been as numerically fluent as the engineers on my team?</p>
<p>After nearly a year of building my non-technical toolbelt, I realized I wasn&#39;t okay with the alarmingly rapid deterioration of my technical side. Drawing a line in the sand, I conssciously beame more involved in dev at work (unheard of in my role) and began to take on some side-projects.</p>
<p>And now I&#39;m straddling this fence. This bi-partisan operating mode. It&#39;s darn uncomfortable. I suspect the straddling is - in itself - a muscle that can be built. Right now it&#39;s weak. At the heart of it, it&#39;s nothing more than the ability to context switch between modes without compromising the quality of work done. I can&#39;t help wonder if this is a worthwhile pursuit. Maybe I simply don&#39;t have the capacity to do this. Maybe I should just pick one mode and go deep on it. Which mode?</p>


<p>
	<div class="social-likes">
			<div class="facebook" title="Share link on Facebook">Facebook</div>
			<div class="twitter" title="Share link on Twitter">Twitter</div>
			<div class="plusone" title="Share link on Google+">Google+</div>
	</div>
</p>

</div>
